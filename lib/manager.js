// Generated by CoffeeScript 1.8.0
(function() {
  var async, makeOperation, parseArgumentFunctions, parseArgumentValues, _;

  _ = require('underscore');

  async = require('async');

  parseArgumentValues = function(args) {
    return _.values(_.pick(args, function(value) {
      return !_.isFunction(value);
    }));
  };

  parseArgumentFunctions = function(args) {
    return _.values(_.pick(args, function(value) {
      return _.isFunction(value);
    }));
  };

  makeOperation = function(action) {
    var operation;
    return operation = function() {
      var args, oldArgs, sequelizeObject;
      oldArgs = arguments;
      args = parseArgumentValues(arguments);
      args.push(function() {
        var values;
        values = oldArgs;
        if (arguments.length > 0) {
          values = parseArgumentValues(arguments);
          values.push(parseArgumentFunctions(oldArgs)[0]);
        }
        return action.apply(null, values);
      });
      if (operation.before != null) {
        operation.before.apply(null, args);
      }
      if (operation.before == null) {
        sequelizeObject = action.apply(null, arguments);
      }
      if (operation.after != null) {
        return operation.after.call(null, sequelizeObject);
      }
    };
  };

  module.exports = function(model) {
    var create, del, list, read, update, updateMultiple;
    create = makeOperation(function(values, done) {
      return model.create(values).then(function(data) {
        return done(null, data);
      })["catch"](done);
    });
    list = makeOperation(function(done) {
      return model.findAll({}).then(function(data) {
        return done(null, data);
      })["catch"](done);
    });
    read = makeOperation(function(id, done) {
      return model.find({
        where: {
          id: id
        }
      }).then(function(data) {
        return done(null, data);
      })["catch"](done);
    });
    update = makeOperation(function(id, values, done) {
      return async.waterfall([
        function(done) {
          return model.update(values, {
            where: {
              id: id
            }
          }).then(function(data) {
            return done(null);
          })["catch"](done);
        }, function(done) {
          return model.find({
            where: {
              id: id
            }
          }).then(function(data) {
            return done(null, data);
          })["catch"](done);
        }
      ], function(err, data) {
        return done(err, data);
      });
    });
    updateMultiple = makeOperation(function(values, done) {
      var updateValue;
      updateValue = function(value, done) {
        return async.waterfall([
          function(done) {
            return model.update(value, {
              where: {
                id: value.id
              }
            }).then(function(data) {
              return done(null);
            })["catch"](done);
          }, function(done) {
            return model.find({
              where: {
                id: value.id
              }
            }).then(function(data) {
              return done(null, value);
            })["catch"](done);
          }
        ], function(err, data) {
          return done(null, data);
        });
      };
      return async.map(values, updateValue, done);
    });
    del = makeOperation(function(id, done) {
      return model.destroy({
        where: {
          id: id
        }
      }).then(function(data) {
        return done(null, data);
      })["catch"](done);
    });
    return {
      create: create,
      list: list,
      read: read,
      update: update,
      updateMultiple: updateMultiple,
      del: del
    };
  };

}).call(this);
