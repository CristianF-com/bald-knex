// Generated by CoffeeScript 1.10.0
(function() {
  var ApiTools, BaldError, async, sendResponse;

  async = require('async');

  ApiTools = require('./ApiTools');

  BaldError = require('./Error');

  sendResponse = ApiTools.sendResponse;

  module.exports = function(arg) {
    var app, endpoints, knex, middleware, model, routes;
    app = arg.app, knex = arg.knex, endpoints = arg.endpoints, model = arg.model, middleware = arg.middleware;
    routes = [
      {
        name: 'list',
        method: 'get',
        url: endpoints.plural,
        handler: function(req, res) {
          return knex(model).select().then(function(data) {
            return sendResponse(res, null, data);
          })["catch"](function(err) {
            return sendResponse(res, err);
          });
        }
      }, {
        name: 'read',
        method: 'get',
        url: endpoints.singular,
        handler: function(req, res) {
          return knex(model).select().where({
            id: req.params.id
          }).then(function(arg1) {
            var data;
            data = arg1[0];
            return sendResponse(res, null, data);
          })["catch"](function(err) {
            return sendResponse(res, err);
          });
        }
      }, {
        name: 'create',
        method: 'post',
        url: endpoints.plural,
        handler: function(req, res) {
          return async.waterfall([
            function(done) {
              return knex(model).insert(req.body).then(function(arg1) {
                var id;
                id = arg1[0];
                return done(null, id);
              })["catch"](done);
            }, function(id, done) {
              return knex(model).select().where({
                id: id
              }).then(function(data) {
                return done(null, data);
              })["catch"](done);
            }
          ], function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'update',
        method: 'put',
        url: endpoints.singular,
        handler: function(req, res) {
          var values;
          values = req.body;
          values.id = req.params.id;
          return async.waterfall([
            function(done) {
              return knex(model).where({
                id: values.id
              }).update(values).then(function(data) {
                return done();
              })["catch"](done);
            }, function(done) {
              return knex(model).where({
                id: values.id
              }).select().then(function(data) {
                return done(null, data);
              })["catch"](done);
            }
          ], function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'delete',
        method: 'delete',
        url: endpoints.singular,
        handler: function(req, res) {
          return knex(model).where({
            id: req.params.id
          }).del().then(function(data) {
            return sendResponse(res, null, data);
          })["catch"](function(err) {
            return sendResponse(res, err);
          });
        }
      }
    ];
    return routes.map(function(route) {
      var routeMiddleware;
      if ((middleware != null) && typeof middleware !== 'object') {
        throw new BaldError('BaldControllerError', 'Invalid middleware array provided.');
      }
      if (middleware != null) {
        routeMiddleware = middleware[route.name] || [];
      }
      if (middleware == null) {
        routeMiddleware = [];
      }
      return app[route.method](route.url, routeMiddleware, route.handler);
    });
  };

}).call(this);
