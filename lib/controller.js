// Generated by CoffeeScript 1.8.0
(function() {
  var sendResponse;

  sendResponse = require('./common')().sendResponse;

  module.exports = function(app, endpoint, manager, middleware) {
    var routes;
    routes = [
      {
        name: 'list',
        method: 'get',
        url: endpoint.plural,
        handler: function(req, res) {
          return manager.list(function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'read',
        method: 'get',
        url: endpoint.singular,
        handler: function(req, res) {
          return manager.read({
            id: req.params.id
          }, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'create',
        method: 'post',
        url: endpoint.plural,
        handler: function(req, res) {
          return manager.create(req.body, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'update',
        method: 'put',
        url: endpoint.singular,
        handler: function(req, res) {
          return manager.update(req.params.id, req.body, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'updateMultiple',
        method: 'put',
        url: endpoint.plural,
        handler: function(req, res) {
          var values;
          values = JSON.parse(req.body.values);
          return manager.updateMultiple(values, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'delete',
        method: 'delete',
        url: endpoint.singular,
        handler: function(req, res) {
          return manager.del(req.params.id, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }
    ];
    return routes.map(function(route) {
      var routeMiddleware;
      if (middleware != null) {
        routeMiddleware = middleware[route.name] || [];
      }
      if (middleware == null) {
        routeMiddleware = [];
      }
      return app[route.method](route.url, routeMiddleware, route.handler);
    });
  };

}).call(this);
