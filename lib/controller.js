// Generated by CoffeeScript 1.8.0
(function() {
  var sendResponse, _;

  sendResponse = require('./common')().sendResponse;

  _ = require('underscore');

  module.exports = function(app, endpoint, manager, middleware) {
    var filterResults, pageResults, routes, sortResults;
    pageResults = function(data, count, page) {
      return _.first(_.rest(data, count * (page - 1)), count);
    };
    sortResults = function(data, sortBy, sort) {
      if (sortBy == null) {
        sortBy === 'id';
      }
      if (sort === 'desc') {
        return _.sortBy(data, sortBy).reverse();
      }
      return _.sortBy(data, sortBy);
    };
    filterResults = function(data, filterBy, filter) {
      if (data.length > 0 && typeof data[0][filterBy] === 'number') {
        filter = +filter;
      }
      return _.where(data, _.object([filterBy], [filter]));
    };
    routes = [
      {
        name: 'list',
        method: 'get',
        url: endpoint.plural,
        handler: function(req, res) {
          return manager.list(function(err, data) {
            if ((req.query.filterBy != null) && (req.query.filter != null)) {
              data = filterResults(data, req.query.filterBy, req.query.filter);
            }
            if (req.query.sort != null) {
              data = sortResults(data, req.query.sortBy, req.query.sort);
            }
            if ((req.query.count != null) && (req.query.page != null)) {
              data = pageResults(data, req.query.count, req.query.page);
            }
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'read',
        method: 'get',
        url: endpoint.singular,
        handler: function(req, res) {
          return manager.read({
            id: req.params.id
          }, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'create',
        method: 'post',
        url: endpoint.plural,
        handler: function(req, res) {
          return manager.create(req.body, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'update',
        method: 'put',
        url: endpoint.singular,
        handler: function(req, res) {
          return manager.update(req.params.id, req.body, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'updateMultiple',
        method: 'put',
        url: endpoint.plural,
        handler: function(req, res) {
          var values;
          values = JSON.parse(req.body.values);
          return manager.updateMultiple(values, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }, {
        name: 'delete',
        method: 'delete',
        url: endpoint.singular,
        handler: function(req, res) {
          return manager.del(req.params.id, function(err, data) {
            return sendResponse(res, err, data);
          });
        }
      }
    ];
    return routes.map(function(route) {
      var routeMiddleware;
      if (middleware != null) {
        routeMiddleware = middleware[route.name] || [];
      }
      if (middleware == null) {
        routeMiddleware = [];
      }
      return app[route.method](route.url, routeMiddleware, route.handler);
    });
  };

}).call(this);
