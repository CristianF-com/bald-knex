// Generated by CoffeeScript 1.9.3
(function() {
  var BaldError, handleError, sendResponse;

  sendResponse = require('./apiTools').sendResponse;

  handleError = require('./common').handleError;

  BaldError = require('./error');

  module.exports = function(app, endpoint, model, middleware) {
    var routes;
    routes = [
      {
        name: 'list',
        method: 'get',
        url: endpoint.plural,
        handler: function(req, res) {
          return model.fetchAll().then(function(data) {
            return sendResponse(res, null, data);
          })["catch"](function(err) {
            return sendResponse(res, err);
          });
        }
      }, {
        name: 'read',
        method: 'get',
        url: endpoint.singular,
        handler: function(req, res) {
          return model.where({
            id: req.params.id
          }).fetch().then(function(data) {
            return sendResponse(res, null, data);
          })["catch"](function(err) {
            return sendResponse(res, err);
          });
        }
      }, {
        name: 'create',
        method: 'post',
        url: endpoint.plural,
        handler: function(req, res) {
          return model.forge(req.body).save().then(function(data) {
            return sendResponse(res, null, data);
          })["catch"](function(err) {
            return sendResponse(res, err);
          });
        }
      }, {
        name: 'update',
        method: 'put',
        url: endpoint.singular,
        handler: function(req, res) {
          var values;
          values = req.body;
          values.id = req.params.id;
          return model.forge(values).save().then(function(data) {
            return sendResponse(res, null, data);
          })["catch"](function(err) {
            return sendResponse(res, err);
          });
        }
      }, {
        name: 'delete',
        method: 'delete',
        url: endpoint.singular,
        handler: function(req, res) {
          return model.forge({
            id: req.params.id
          }).destroy().then(function(data) {
            return sendResponse(res, null, data);
          })["catch"](function(err) {
            return sendResponse(res, err);
          });
        }
      }
    ];
    return routes.map(function(route) {
      var routeMiddleware;
      if ((middleware != null) && typeof middleware !== 'object') {
        throw new BaldError('BaldControllerError', 'Invalid middleware array provided.');
      }
      if (middleware != null) {
        routeMiddleware = middleware[route.name] || [];
      }
      if (middleware == null) {
        routeMiddleware = [];
      }
      return app[route.method](route.url, routeMiddleware, route.handler);
    });
  };

}).call(this);
