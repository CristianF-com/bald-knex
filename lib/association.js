// Generated by CoffeeScript 1.10.0
(function() {
  var BaldError, associateModels, async, attempt, inflect, util;

  inflect = require('inflect');

  async = require('async');

  util = require('util');

  BaldError = require('./error');

  associateModels = function(targetModels, sourceData, sourceModel, next) {
    var processAssociation;
    processAssociation = function(targetModelData, done) {
      var association, models, query, ref, targetMethod, targetModel;
      models = sourceModel.sequelize.models;
      association = sourceModel.associations[targetModelData.name.plural] || sourceModel.associations[targetModelData.name.singular];
      if (association == null) {
        throw new BaldError('BaldAssociationError', 'Association unavailable.');
      }
      targetModel = association.target || association.target;
      targetMethod = ((ref = association.accessors) != null ? ref[targetModelData.method] : void 0) || association[targetModelData.method];
      if (targetMethod == null) {
        throw new BaldError('BaldAssociationError', 'Method unavailable for model.');
      }
      query = {};
      query.where = {};
      query.where[targetModel.primaryKeyField] = targetModelData.value;
      return targetModel.findAll(query).then(function(targetData) {
        if (typeof targetModelData.value !== 'object') {
          targetData = targetData[0];
        }
        return sourceData[targetMethod](targetData).then(function(res) {
          return done(null, res);
        });
      });
    };
    return async.map(targetModels, processAssociation, function(err, res) {
      return next(null, sourceData);
    });
  };

  attempt = function(sourceModel, sourceData, values, next) {
    var filteredValues, targetModels;
    if (sourceData == null) {
      throw new BaldError('BaldAssociationError', 'Attempted to associate with an inexistent resource.');
    }
    filteredValues = Object.keys(values).filter(function(key) {
      var modelName;
      if (key.split('.').length === 2) {
        modelName = key.split('.')[0];
      }
      if (modelName == null) {
        return false;
      }
      return (sourceModel.associations[modelName] != null) || (sourceModel.associations[inflect.pluralize(modelName)] != null);
    });
    targetModels = filteredValues.map(function(value) {
      var data, error, name, queryValue, ref;
      data = value.split('.');
      name = (ref = sourceModel.associations[data[0]]) != null ? ref.options.name : void 0;
      if (name == null) {
        throw new BaldError('BaldAssociationError', data[0] + ' does not exist, try singularizing or pluralizing it!');
      }
      try {
        queryValue = JSON.parse(values[value]);
      } catch (error) {
        queryValue = values[value];
      }
      return {
        name: name,
        method: data[1],
        value: queryValue
      };
    });
    if (targetModels.length === 0) {
      return next(null, sourceData);
    }
    return associateModels(targetModels, sourceData, sourceModel, next);
  };

  module.exports = {
    attempt: attempt,
    associateModels: associateModels
  };

}).call(this);
